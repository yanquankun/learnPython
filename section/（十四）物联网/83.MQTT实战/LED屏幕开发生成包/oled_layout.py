# Auto-generated by oled_preview_and_export.py
# Layout:
#  L1: if wifi_on: "wifi" + fixed spacing + datetime string (YYYY-MM-DD HH:mm)
#      else: datetime string only
#  L2: "温度：" + fixed spacing + xx.x°C
#  L3: "湿度：" + fixed spacing + yy.y%

try:
    import font_cn
    CN_FONT = font_cn.FONT
except Exception:
    CN_FONT = {}

W = 128
H = 64
SP = 10

def _clip(v, lo, hi):
    return max(lo, min(hi, v))

def _char_width(ch):
    o = ord(ch)
    if 32 <= o <= 126:
        return 8
    g = CN_FONT.get(ch) or CN_FONT.get(ch.encode("unicode_escape").decode("ascii"))
    if g:
        return g['w']
    return 12

def _text_width(text):
    w = 0
    for ch in str(text or ""):
        w += _char_width(ch)
    return w

def _blit_bitmap(oled, x, y, w, h, data_bytes):
    byte_idx = 0
    for yy in range(h):
        bits_left = 0
        cur = 0
        for xx in range(w):
            if bits_left == 0:
                cur = data_bytes[byte_idx]
                byte_idx += 1
                bits_left = 8
            bit = (cur & 0x80) != 0
            cur = (cur << 1) & 0xFF
            bits_left -= 1
            if 0 <= x+xx < oled.width and 0 <= y+yy < oled.height:
                if bit:
                    oled.pixel(x+xx, y+yy, 1)

def _draw_glyph(oled, ch, x, y):
    o = ord(ch)
    if 32 <= o <= 126:
        yy = y if oled.height < 8 else _clip(y, 0, oled.height - 8)
        oled.text(ch, x, yy, 1)
        return x + 8
    g = CN_FONT.get(ch) or CN_FONT.get(ch.encode("unicode_escape").decode("ascii"))
    if g:
        _blit_bitmap(oled, x, y, g['w'], g['h'], g['data'])
        return x + g['w']
    return x + 12

def _draw_text(oled, text, x, y, max_w=None, ellipsis=True):
    text = str(text or "")
    used = 0
    out = []
    for ch in text:
        w = _char_width(ch)
        if max_w is not None and used + w > max_w:
            if ellipsis and used + _char_width('…') <= (max_w or 9999):
                out.append('…')
            break
        out.append(ch)
        used += w
    cx = x
    for ch in out:
        cx = _draw_glyph(oled, ch, cx, y)

def _normalize_dt(s):
    # Return YYYY-MM-DD HH:mm without using datetime/strptime (MicroPython-safe)
    s = str(s or "")
    if len(s) >= 16:
        return s[:16]
    try:
        from time import localtime
        t = localtime()
        return "%04d-%02d-%02d %02d:%02d" % (t[0], t[1], t[2], t[3], t[4])
    except Exception:
        return s

def render(oled, temp_c, humi, now_str, wifi_on):
    W = oled.width
    H = oled.height
    oled.fill(0)

    # Prepare datetime string in format YYYY-MM-DD HH:mm
    dt_display = _normalize_dt(now_str)

    # L1: if wifi_on, prefix "wifi" + fixed spacing + datetime, else datetime only
    if wifi_on:
        label = "wifi"
        label_w = _text_width(label)
        _draw_text(oled, label, 0, 2)
        _draw_text(oled, dt_display, label_w + SP, 2, max_w=W, ellipsis=True)
    else:
        _draw_text(oled, dt_display, 0, 2, max_w=W, ellipsis=True)

    # L2: "温度：" + fixed spacing + xx.x°C
    label_temp = "温度："
    label_temp_w = _text_width(label_temp)
    try:
        t_str = '{:.1f}'.format(temp_c)
    except Exception:
        t_str = 'NaN'
    temp_line = t_str + "°C"
    _draw_text(oled, label_temp, 0, 24)
    _draw_text(oled, temp_line, label_temp_w + SP, 24, max_w=W)

    # L3: "湿度：" + fixed spacing + yy.y%
    label_humi = "湿度："
    label_humi_w = _text_width(label_humi)
    try:
        h_str = '{:.1f}'.format(humi)
    except Exception:
        h_str = 'NaN'
    humi_line = h_str + "%"
    _draw_text(oled, label_humi, 0, 42)
    _draw_text(oled, humi_line, label_humi_w + SP, 42, max_w=W)

    oled.pixel(W-1, H-1, 1)
    oled.show()
